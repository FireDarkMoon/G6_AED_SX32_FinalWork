#include "Libraries.h"
#include "Defines.h"
#include "EnumsConstants.h"
#include "Functions.h"

void Settings_() {
	srand(time(NULL));
	Console::Title = "TITLE";
	Console::CursorVisible = false;
	Console::SetWindowSize(70, 30);
}

int IntRandom_(int _min, int _max) {
	return _min + rand() % (_max - _min + 1);
}

char CharRandom_(char _min, char _max) {
	return _min + rand() % (_max - _min + 1);
}

void FontColor_(int _color) {
	Console::ForegroundColor = (System::ConsoleColor)(_color);
}

void CharColor_(char _c, int _color) {
	FontColor_(_color); cout << _c;
}

void StringColor_(string _s, int _color) {
	FontColor_(_color); cout << _s;
}

void Show_(int _x, int _y) {
	Console::SetCursorPosition(_x, _y);
}

void ShowColor_(int _x, int _y, int _color) {
	Show_(_x, _y);
	FontColor_(_color);
}

void ShowChar_(int _x, int _y, char _c) {
	Show_(_x, _y); cout << _c;
}

void ShowString_(int _x, int _y, string _s) {
	Show_(_x, _y);  cout << _s;
}

void ShowCharColor_(int _x, int _y, char _c, int _color) {
	ShowColor_(_x, _y, _color); cout << _c;
}

void ShowStringColor_(int _x, int _y, string _s, int _color) {
	ShowColor_(_x, _y, _color); cout << _s;
}

void ClearScreen_() {
	Console::Clear();
}

bool PrimeNumber_(int _n) {
	if (_n > 1) {
		int v{ 0 };
		for (int i = 1; i <= _n; i++)
			if (_n % i == 0) v++;

		if (v > 2) return false;
		else return true;
	}
	else return false;
}

void ShowBubble_(int* _arr, int _n) {
	for (int i = 0; i < _n; i++) {
		if (i != _n - 1) cout << _arr[i] << " ";
		else cout << _arr[i];
	}
}

void BubbleSort_(int* _arr, int _n, bool _order) {
	switch (_order) {
	case 0:
		for (int i = 0; i < _n - 1; i++) {
			int min = i;
			for (int j = i + 1; j < _n; j++)
				if (_arr[j] <= _arr[min])
					min = j;

			int tempArr = _arr[i];
			_arr[i] = _arr[min];
			_arr[min] = tempArr;
		}
		break;

	case 1:
		for (int i = 0; i < _n - 1; i++) {
			int max = i;
			for (int j = i + 1; j < _n; j++)
				if (_arr[j] >= _arr[max])
					max = j;

			int tempArr = _arr[i];
			_arr[i] = _arr[max];
			_arr[max] = tempArr;
		}
		break;

	default: break;
	}
}

/*
int schedule[35][99]{
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,0,0,0,0,0,0,0,0,0,0,0,0,0,-1,1,0,0,0,0,0,0,0,0,0,0,-1,2,0,0,0,0,0,0,0,0,0,0,-1,3,0,0,0,0,0,0,0,0,0,0,-1,4,0,0,0,0,0,0,0,0,0,0,-1,5,0,0,0,0,0,0,0,0,0,0,-1,6,0,0,0,0,0,0,0,0,0,0,-1,},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,7,0,0,0,0,0,0,0,0,0,0,0,0,-1,17,0,0,0,0,0,0,0,0,0,0,-1,27,0,0,0,0,0,0,0,0,0,0,-1,37,0,0,0,0,0,0,0,0,0,0,-1,47,0,0,0,0,0,0,0,0,0,0,-1,57,0,0,0,0,0,0,0,0,0,0,-1,67,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,8,0,0,0,0,0,0,0,0,0,0,0,0,-1,18,0,0,0,0,0,0,0,0,0,0,-1,28,0,0,0,0,0,0,0,0,0,0,-1,38,0,0,0,0,0,0,0,0,0,0,-1,48,0,0,0,0,0,0,0,0,0,0,-1,58,0,0,0,0,0,0,0,0,0,0,-1,68,0,0,0,0,0,0,0,0,0,0,-1,},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,9,0,0,0,0,0,0,0,0,0,0,0,0,-1,19,0,0,0,0,0,0,0,0,0,0,-1,29,0,0,0,0,0,0,0,0,0,0,-1,39,0,0,0,0,0,0,0,0,0,0,-1490,0,0,0,0,0,0,0,0,0,0,-1,59,0,0,0,0,0,0,0,0,0,0,-1,69,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,10,0,0,0,0,0,0,0,0,0,0,0,0,-1,110,0,0,0,0,0,0,0,0,0,0,-1,210,0,0,0,0,0,0,0,0,0,0,-1,310,0,0,0,0,0,0,0,0,0,0,-1,410,0,0,0,0,0,0,0,0,0,0,-1,510,0,0,0,0,0,0,0,0,0,0,-1,610,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,11,0,0,0,0,0,0,0,0,0,0,0,0,-1,111,0,0,0,0,0,0,0,0,0,0,-1,211,0,0,0,0,0,0,0,0,0,0,-1,311,0,0,0,0,0,0,0,0,0,0,-1,411,0,0,0,0,0,0,0,0,0,0,-1,511,0,0,0,0,0,0,0,0,0,0,-1,611,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,12,0,0,0,0,0,0,0,0,0,0,0,0,-1,112,0,0,0,0,0,0,0,0,0,0,-1,212,0,0,0,0,0,0,0,0,0,0,-1,312,0,0,0,0,0,0,0,0,0,0,-1,412,0,0,0,0,0,0,0,0,0,0,-1,512,0,0,0,0,0,0,0,0,0,0,-1,612,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,13,0,0,0,0,0,0,0,0,0,0,0,0,-1,113,0,0,0,0,0,0,0,0,0,0,-1,213,0,0,0,0,0,0,0,0,0,0,-1,313,0,0,0,0,0,0,0,0,0,0,-1,413,0,0,0,0,0,0,0,0,0,0,-1,513,0,0,0,0,0,0,0,0,0,0,-1,613,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,14,0,0,0,0,0,0,0,0,0,0,0,0,-1,114,0,0,0,0,0,0,0,0,0,0,-1,214,0,0,0,0,0,0,0,0,0,0,-1,314,0,0,0,0,0,0,0,0,0,0,-1,414,0,0,0,0,0,0,0,0,0,0,-1,514,0,0,0,0,0,0,0,0,0,0,-1,614,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,15,0,0,0,0,0,0,0,0,0,0,0,0,-1,115,0,0,0,0,0,0,0,0,0,0,-1,215,0,0,0,0,0,0,0,0,0,0,-1,315,0,0,0,0,0,0,0,0,0,0,-1,415,0,0,0,0,0,0,0,0,0,0,-1,515,0,0,0,0,0,0,0,0,0,0,-1,615,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,16,0,0,0,0,0,0,0,0,0,0,0,0,-1,116,0,0,0,0,0,0,0,0,0,0,-1,216,0,0,0,0,0,0,0,0,0,0,-1,316,0,0,0,0,0,0,0,0,0,0,-1,416,0,0,0,0,0,0,0,0,0,0,-1,516,0,0,0,0,0,0,0,0,0,0,-1,616,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,17,0,0,0,0,0,0,0,0,0,0,0,0,-1,117,0,0,0,0,0,0,0,0,0,0,-1,217,0,0,0,0,0,0,0,0,0,0,-1,317,0,0,0,0,0,0,0,0,0,0,-1,417,0,0,0,0,0,0,0,0,0,0,-1,517,0,0,0,0,0,0,0,0,0,0,-1,617,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,18,0,0,0,0,0,0,0,0,0,0,0,0,-1,118,0,0,0,0,0,0,0,0,0,0,-1,218,0,0,0,0,0,0,0,0,0,0,-1,318,0,0,0,0,0,0,0,0,0,0,-1,418,0,0,0,0,0,0,0,0,0,0,-1,518,0,0,0,0,0,0,0,0,0,0,-1,618,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,19,0,0,0,0,0,0,0,0,0,0,0,0,-1,119,0,0,0,0,0,0,0,0,0,0,-1,219,0,0,0,0,0,0,0,0,0,0,-1,319,0,0,0,0,0,0,0,0,0,0,-1,419,0,0,0,0,0,0,0,0,0,0,-1,519,0,0,0,0,0,0,0,0,0,0,-1,619,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,20,0,0,0,0,0,0,0,0,0,0,0,0,-1,120,0,0,0,0,0,0,0,0,0,0,-1,220,0,0,0,0,0,0,0,0,0,0,-1,320,0,0,0,0,0,0,0,0,0,0,-1,420,0,0,0,0,0,0,0,0,0,0,-1,520,0,0,0,0,0,0,0,0,0,0,-1,620,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,21,0,0,0,0,0,0,0,0,0,0,0,0,-1,121,0,0,0,0,0,0,0,0,0,0,-1,221,0,0,0,0,0,0,0,0,0,0,-1,321,0,0,0,0,0,0,0,0,0,0,-1,421,0,0,0,0,0,0,0,0,0,0,-1,521,0,0,0,0,0,0,0,0,0,0,-1,621,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
	{-1,22,0,0,0,0,0,0,0,0,0,0,0,0,-1,122,0,0,0,0,0,0,0,0,0,0,-1,222,0,0,0,0,0,0,0,0,0,0,-1,322,0,0,0,0,0,0,0,0,0,0,-1,422,0,0,0,0,0,0,0,0,0,0,-1,522,0,0,0,0,0,0,0,0,0,0,-1,622,0,0,0,0,0,0,0,0,0,0,-1},
	{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1}
};

int n[16][6]{
	{17,27,37,47,57,67},
	{18,28,38,48,58,68},
	{19,29,39,49,59,69},
	{110,210,310,410,510,610},
	{111,211,311,411,511,611},
	{112,212,312,412,512,612},
	{113,213,313,413,513,613},
	{114,214,314,414,514,614},
	{115,215,315,415,515,615},
	{116,216,316,416,516,616},
	{117,217,317,417,517,617},
	{118,218,318,418,518,618},
	{119,219,319,419,519,619},
	{120,220,320,420,520,620},
	{121,221,321,421,521,621},
	{122,222,322,422,522,622}
};
*/

	void DrawTable_(int _numCellsHorizontal, int _numCellsVertical, int _cellWidth, int _cellHeight, int _color, int _x, int _y) {
	int numCellsHorizontal = _numCellsHorizontal;
	int numCellsVertical = _numCellsVertical;
	int cellWidth = _cellWidth;
	int cellHeight = _cellHeight;
	int cellWidthWithBorder = cellWidth + 1; // Includes border width
	int cellHeightWithBorder = cellHeight + 1; // Includes border height
	int tableWidth = numCellsHorizontal * cellWidthWithBorder + 1;
	int tableHeight = numCellsVertical * cellHeightWithBorder + 1;
	int x = _x;
	int y = _y;
	int color = _color;

	Console::SetWindowSize(tableWidth + 4 * x, tableHeight + 2 * y);

	for (int j = 0; j < tableWidth; j++) {
		for (int i = 0; i < tableHeight; i++) {
			FontColor_(color);

			if (i % cellHeightWithBorder == 0) ShowChar_(j + 2 * x, i + y, CharHL);
			if (j % cellWidthWithBorder == 0) ShowChar_(j + 2 * x, i + y, CharVL);

			if (i == 0 && j == 0) ShowChar_(j + 2 * x, i + y, CharLHC);
			if (i == 0 && j == tableWidth - 1) ShowChar_(j + 2 * x, i + y, CharRHC);
			if (i == tableHeight - 1 && j == 0) ShowChar_(j + 2 * x, i + y, CharLLC);
			if (i == tableHeight - 1 && j == tableWidth - 1) ShowChar_(j + 2 * x, i + y, CharRLC);

			if ((i % cellHeightWithBorder == 0) && (j % cellWidthWithBorder == 0) && (i == 0) && (j != 0) && (j != tableWidth - 1)) ShowChar_(j + 2 * x, i + y, CharDHL);
			if ((i % cellHeightWithBorder == 0) && (j % cellWidthWithBorder == 0) && (i == tableHeight - 1) && (j != 0) && (j != tableWidth - 1)) ShowChar_(j + 2 * x, i + y, CharUHL);
			if ((i % cellHeightWithBorder == 0) && (j % cellWidthWithBorder == 0) && (j == 0) && (i != 0) && (i != tableHeight - 1)) ShowChar_(j + 2 * x, i + y, CharRVL);
			if ((i % cellHeightWithBorder == 0) && (j % cellWidthWithBorder == 0) && (j == tableWidth - 1) && (i != 0) && (i != tableHeight - 1)) ShowChar_(j + 2 * x, i + y, CharLVL);

			if ((i % cellHeightWithBorder == 0) && (j % cellWidthWithBorder == 0) && (i != 0) && (j != 0) && (i != tableHeight - 1) && (j != tableWidth - 1)) ShowChar_(j + 2 * x, i + y, CharC);
		}
	}
}

void WaitKey_() {
	char c = _getch();
}

